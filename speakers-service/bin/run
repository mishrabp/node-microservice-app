#!/usr/bin/env node
const appInsights = require('applicationinsights');
const axios = require('axios');

const http = require('http');

const config = require('../config')[process.env.NODE_ENV || 'development'];

appInsights.setup(`${config.appInsight.connectionString}`)
  .setAutoDependencyCorrelation(true)
  .setAutoCollectRequests(true)
  .setAutoCollectPerformance(true, true)
  .setAutoCollectExceptions(true)
  .setAutoCollectDependencies(true)
  .setAutoCollectConsole(true)
  .setUseDiskRetryCaching(true)
  .setSendLiveMetrics(true)
  .setDistributedTracingMode(appInsights.DistributedTracingModes.AI)
  .start();

const log = config.log();
const service = require('../server/service')(config);

const server = http.createServer(service);

// Important - a service should not have a fixed port but should randomly choose one
server.listen(config.port || 8080);

server.on('listening', () => {
  const registerService = () => axios.put(`${config.serviceregistry.protocol}://${config.serviceregistry.ip}:${config.serviceregistry.port}/register/${config.name}/${config.version}/${config.ipaddress}/${config.port}`)
    .catch(err => log.fatal(err));
  const unregisterService = () => axios.delete(`${config.serviceregistry.protocol}://${config.serviceregistry.ip}:${config.serviceregistry.port}/unregister/${config.name}/${config.version}/${config.ipaddress}/${config.port}`)
    .catch(err => log.fatal(err));

  registerService();

  const interval = setInterval(registerService, 20000);
  const cleanup = async () => {
    clearInterval(interval); 
    await unregisterService();
  };

  process.on('uncaughtException', async () => {
    await cleanup();
    process.exit(0);
  });
  process.on('SIGNT', async () => {
    await cleanup();
    process.exit(0);
  });
  process.on('SIGTERM', async () => {
    await cleanup();
    process.exit(0);
  });

  log.info(
    `Hi there! I'm listening on port ${server.address().port} in ${service.get('env')} mode.`,
  );
});
